export const cppDefault = '#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    std::cout << "What is your name? ";\n    std::cin >> name;\n    std::cout << "Hello, " << name << "!" << std::endl;\n    return 0;\n}';

export const cppConcepts = [
  { id: 1, title: 'Program Structure', explanation: 'A C++ program must have a `main()` function, which is the entry point. `#include` is used to include header files like `<iostream>` for input/output.', codeSnippet: `#include <iostream>\n\nint main() {\n  std::cout << "Hello!" << std::endl;\n  return 0;\n}` },
  { id: 2, title: 'Variables & Types', explanation: 'In C++, you must declare the type of a variable. Common types are `int`, `double`, `std::string`, `char`, and `bool`.', codeSnippet: `int myNum = 5;\ndouble myFloat = 5.99;\nstd::string myText = "Hello";` },
  { id: 3, title: 'Operators', explanation: 'Used to perform operations on variables and values, such as arithmetic (+, -, *, /) and comparison (==, !=, >).', codeSnippet: `int x = 100 + 50;\nint y = x / 2;\nstd::cout << (x > y); // Outputs 1 (true)` },
  { id: 4, title: 'If...Else', explanation: 'Conditional statements that execute different blocks of code based on whether a condition is true or false.', codeSnippet: `int time = 20;\nif (time < 18) {\n  std::cout << "Good day." << std::endl;\n} else {\n  std::cout << "Good evening." << std::endl;\n}` },
  { id: 5, title: 'While Loops', explanation: 'Loops through a block of code as long as a specified condition is true.', codeSnippet: `int i = 0;\nwhile (i < 5) {\n  std::cout << i << std::endl;\n  i++;\n}` },
  { id: 6, title: 'For Loops', explanation: 'The for loop has three parts: initialization, condition, and increment.', codeSnippet: `#include <iostream>\n\nint main() {\n  for (int i = 0; i < 5; i++) {\n    std::cout << i << std::endl;\n  }\n  return 0;\n}` },
  { id: 7, title: 'Arrays', explanation: 'Used to store multiple values in a single variable, instead of declaring separate variables for each value.', codeSnippet: `std::string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};\nstd::cout << cars[0]; // Outputs Volvo` },
  { id: 8, title: 'Functions', explanation: 'A block of code designed to perform a particular task. You declare a function with its return type, name, and parameters.', codeSnippet: `void greet(std::string name) {\n  std::cout << "Hello, " << name << "!" << std::endl;\n}\n\nint main() {\n  greet("Aanish");\n  return 0;\n}` },
  { id: 9, title: 'Pointers', explanation: 'A variable that stores the memory address of another variable. The `&` operator gets the address, and the `*` operator gets the value at that address.', codeSnippet: `std::string food = "Pizza";\nstd::string* ptr = &food;\nstd::cout << *ptr; // Outputs Pizza` },
  { id: 10, title: 'References', explanation: 'A reference variable is an "alias" for an already existing variable. Changes to the reference also change the original.', codeSnippet: `std::string food = "Pizza";\nstd::string &meal = food;\nstd::cout << meal; // Outputs Pizza` },
  { id: 11, title: 'Classes & Objects', explanation: 'C++ is an object-oriented language. A class is a blueprint for creating objects (a particular data structure).', codeSnippet: `class MyClass {\n  public:\n    int myNum;\n};\n\nint main() {\n  MyClass myObj;\n  myObj.myNum = 15;\n  std::cout << myObj.myNum;\n  return 0;\n}` },
  { id: 12, title: 'Constructors', explanation: 'A special method that is automatically called when an object of a class is created. It is used to initialize values.', codeSnippet: `class Car {\n  public:\n    std::string brand;\n    Car(std::string b) { // Constructor\n      brand = b;\n    }\n};\n\nint main() {\n  Car carObj("Ford");\n  std::cout << carObj.brand;\n  return 0;\n}` }
];