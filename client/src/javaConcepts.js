export const javaDefault = 'public class Main {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}';

export const javaConcepts = [
  { id: 1, title: 'Program Structure', explanation: 'Every Java application must have at least one class definition and a `main()` method, which is the entry point.', codeSnippet: `public class Main {\n  public static void main(String[] args) {\n    System.out.println("Hello!");\n  }\n}` },
  { id: 2, title: 'Variables & Types', explanation: 'In Java, variables must be declared with a specified data type. Common primitive types are `int`, `double`, `char`, and `boolean`. `String` is a class.', codeSnippet: `int myNum = 5;\nString myText = "Hello";\nboolean myBool = true;` },
  { id: 3, title: 'Operators', explanation: 'Used to perform operations on variables and values. Includes arithmetic (+, -, *, /) and logical (&&, ||, !) operators.', codeSnippet: `int x = 10;\nSystem.out.println(x + 5);\nSystem.out.println(x > 5 && x < 15); // true` },
  { id: 4, title: 'If...Else', explanation: 'Conditional statements that execute different blocks of code based on a condition.', codeSnippet: `int time = 20;\nif (time < 18) {\n  System.out.println("Good day.");\n} else {\n  System.out.println("Good evening.");\n}` },
  { id: 5, title: 'While Loops', explanation: 'Loops through a block of code as long as a specified condition is true.', codeSnippet: `int i = 0;\nwhile (i < 5) {\n  System.out.println(i);\n  i++;\n}` },
  { id: 6, title: 'For Loops', explanation: 'Used to execute a block of code a number of times.', codeSnippet: `for (int i = 0; i < 5; i++) {\n  System.out.println(i);\n}` },
  { id: 7, title: 'Arrays', explanation: 'Used to store multiple values of the same type in a single variable.', codeSnippet: `String[] cars = {"Volvo", "BMW", "Ford"};\nSystem.out.println(cars[0]); // Volvo` },
  { id: 8, 'title': 'Methods', 'explanation': 'A method is a block of code which only runs when it is called. You can pass data, known as parameters, into a method.', 'codeSnippet': `public class Main {\n  static void myMethod(String name) {\n    System.out.println("Hello, " + name + "!");\n  }\n\n  public static void main(String[] args) {\n    myMethod("Aanish");\n  }\n}` },
  { id: 9, title: 'Classes & Objects', explanation: 'Java is an object-oriented language. A class is a blueprint for objects, and objects are instances of a class.', codeSnippet: `public class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    Main myObj = new Main(); // Create an object\n    System.out.println(myObj.x);\n  }\n}` },
  { id: 10, title: 'Constructors', explanation: 'A special method that is used to initialize objects. The constructor is called when an object of a class is created.', codeSnippet: `public class Main {\n  int x;\n\n  public Main() { // Constructor\n    x = 5;\n  }\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(myObj.x);\n  }\n}` },
  { id: 11, title: 'ArrayList', explanation: 'A resizable array, found in the `java.util` package. It provides more flexibility than the standard array.', codeSnippet: `import java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> cars = new ArrayList<String>();\n    cars.add("Volvo");\n    cars.add("BMW");\n    System.out.println(cars.get(0));\n  }\n}` },
  { id: 12, title: 'Exception Handling', explanation: 'The `try...catch` statement allows you to define a block of code to be tested for errors while it is being executed.', codeSnippet: `public class Main {\n  public static void main(String[] args) {\n    try {\n      int[] myNumbers = {1, 2, 3};\n      System.out.println(myNumbers[10]);\n    } catch (Exception e) {\n      System.out.println("Something went wrong.");\n    }\n  }\n}` }
];