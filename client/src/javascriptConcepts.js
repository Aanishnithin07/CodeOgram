export const javascriptDefault = 'console.log("Hello, World!");';

export const javascriptConcepts = [
  { id: 1, title: 'Variables (let, const, var)', explanation: '`let` is for block-scoped variables that can be reassigned. `const` is for block-scoped constants. `var` is the older, function-scoped keyword.', codeSnippet: `let age = 30;\nage = 31; // OK\n\nconst name = "Aanish";\n// name = "Nithin"; // Error!` },
  { id: 2, title: 'Data Types', explanation: 'JavaScript has dynamic types. Common types are String, Number, Boolean, Object, null, and undefined.', codeSnippet: `let length = 16;         // Number\nlet lastName = "Johnson";  // String\nlet x = { a: 1, b: 2 };   // Object` },
  { id: 3, title: 'Objects', explanation: 'A collection of key/value pairs, a fundamental building block in JavaScript.', codeSnippet: `const person = {\n  firstName: "John",\n  lastName: "Doe",\n  age: 50\n};\nconsole.log(person.firstName);` },
  { id: 4, title: 'Arrays', explanation: 'A special variable which can hold more than one value at a time, accessible by a numeric index.', codeSnippet: `const cars = ["Saab", "Volvo"];\ncars.push("BMW");\nconsole.log(cars[0]); // Saab` },
  { id: 5, title: 'Functions', explanation: 'A block of code designed to perform a particular task, executed when "invoked".', codeSnippet: `function multiply(a, b) {\n  return a * b;\n}\nlet result = multiply(5, 10);\nconsole.log(result); // 50` },
  { id: 6, title: 'Arrow Functions', explanation: 'A more concise syntax for writing function expressions, introduced in ES6.', codeSnippet: `const multiply = (a, b) => a * b;\nconsole.log(multiply(5, 10)); // 50` },
  { id: 7, title: 'Template Literals', explanation: 'A modern way to work with strings, allowing embedded expressions and multi-line strings.', codeSnippet: `const name = "Aanish";\nconst greeting = \`Hello, \${name}!\`;\nconsole.log(greeting);` },
  { id: 8, title: 'Destructuring', explanation: 'A convenient way of extracting multiple properties from an object or items from an array.', codeSnippet: `const person = { first: 'John', last: 'Doe' };\nconst { first, last } = person;\nconsole.log(first); // John` },
  { id: 9, title: 'The map() Method', explanation: 'Creates a new array by performing a function on each element of an existing array.', codeSnippet: `const numbers = [4, 9, 16];\nconst newArr = numbers.map(Math.sqrt);\n// newArr is [2, 3, 4]` },
  { id: 10, title: 'The filter() Method', explanation: 'Creates a new array with all elements that pass a test implemented by the provided function.', codeSnippet: `const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\n// adults is [32, 33, 40]` },
  { id: 11, title: 'If...Else', explanation: 'Conditional statements used to perform different actions based on different conditions.', codeSnippet: `const time = 20;\nif (time < 18) {\n  console.log("Good day.");\n} else {\n  console.log("Good evening.");\n}` },
  { id: 12, title: 'For Loops', explanation: 'Used to execute a block of code a number of times.', codeSnippet: `let text = "";\nfor (let i = 0; i < 5; i++) {\n  text += "The number is " + i + "\\n";\n}\nconsole.log(text);` },
  { id: 13, title: 'DOM Manipulation', explanation: 'The Document Object Model allows JavaScript to change the content and style of a webpage.', codeSnippet: `// HTML: <p id="demo"></p>\ndocument.getElementById("demo").innerHTML = "Hello!";` },
  { id: 14, title: 'Event Handling', explanation: 'Allows JavaScript to execute code when events occur, like a user clicking a button.', codeSnippet: `// HTML: <button id="myBtn">Click Me</button>\ndocument.getElementById("myBtn").onclick = () => {\n  console.log('Button clicked!');\n};` },
  { id: 15, title: 'Async/Await', explanation: 'Modern syntax to handle asynchronous operations (Promises) in a more comfortable, synchronous-like way.', codeSnippet: `async function fetchData() {\n  const response = await fetch('url');\n  const data = await response.json();\n  console.log(data);\n}` }
];